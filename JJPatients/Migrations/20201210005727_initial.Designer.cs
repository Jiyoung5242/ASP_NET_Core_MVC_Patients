// <auto-generated />
using System;
using JJPatients.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JJPatients.Migrations
{
    [DbContext(typeof(PatientsContext))]
    [Migration("20201210005727_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JJPatients.Models.ConcentrationUnit", b =>
                {
                    b.Property<string>("ConcentrationCode")
                        .HasColumnName("concentrationCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ConcentrationCode");

                    b.ToTable("concentrationUnit");
                });

            modelBuilder.Entity("JJPatients.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnName("countryCode")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasComment("2-character short form for country")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<double>("FederalSalesTax")
                        .HasColumnName("federalSalesTax")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasComment("formal name of country")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhonePattern")
                        .HasColumnName("phonePattern")
                        .HasColumnType("varchar(50)")
                        .HasComment("regular expression used to validate a phone number in this country, includes ^ and $")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PostalPattern")
                        .HasColumnName("postalPattern")
                        .HasColumnType("varchar(120)")
                        .HasComment("regular expression used to validate the postal or zip code for this country, includes ^ and $")
                        .HasMaxLength(120)
                        .IsUnicode(false);

                    b.HasKey("CountryCode");

                    b.ToTable("country");

                    b.HasComment("list of countries and data pertinent to them");
                });

            modelBuilder.Entity("JJPatients.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("diagnosisId")
                        .HasColumnType("int")
                        .HasComment("random key")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiagnosisCategoryId")
                        .HasColumnName("diagnosisCategoryId")
                        .HasColumnType("int")
                        .HasComment("link to major categories");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasComment("medical name for ailment")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("DiagnosisId")
                        .HasName("aaaaadiagnosis_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DiagnosisCategoryId")
                        .HasName("diseasecategoryId");

                    b.HasIndex("DiagnosisId")
                        .HasName("ailmentId");

                    b.ToTable("diagnosis");
                });

            modelBuilder.Entity("JJPatients.Models.DiagnosisCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasComment("random key, allowing category to be renamed")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasComment("major medical categories: cardiology, respiratory, etc.")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id")
                        .HasName("aaaaacategory_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Id")
                        .HasName("categoryId");

                    b.ToTable("diagnosisCategory");
                });

            modelBuilder.Entity("JJPatients.Models.DispensingUnit", b =>
                {
                    b.Property<string>("DispensingCode")
                        .HasColumnName("dispensingCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("DispensingCode");

                    b.ToTable("dispensingUnit");
                });

            modelBuilder.Entity("JJPatients.Models.Medication", b =>
                {
                    b.Property<string>("Din")
                        .HasColumnName("din")
                        .HasColumnType("varchar(8)")
                        .HasComment("8-digit drug identification number")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<double>("Concentration")
                        .HasColumnName("concentration")
                        .HasColumnType("float")
                        .HasComment("concentration quantity, n concentration units, zero if n/a");

                    b.Property<string>("ConcentrationCode")
                        .IsRequired()
                        .HasColumnName("concentrationCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DispensingCode")
                        .IsRequired()
                        .HasColumnName("dispensingCode")
                        .HasColumnType("varchar(50)")
                        .HasComment("dispensing units: pills, capsils, mg, tablespoons, etc.")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("varchar(50)")
                        .HasComment("file-name of product image")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("MedicationTypeId")
                        .HasColumnName("medicationTypeId")
                        .HasColumnType("int")
                        .HasComment("type of drug ... anticoagulant, antihistimine, etc.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("name of drug as branded by manufacturer")
                        .HasMaxLength(20);

                    b.HasKey("Din")
                        .HasName("aaaaamedication_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ConcentrationCode");

                    b.HasIndex("DispensingCode");

                    b.HasIndex("MedicationTypeId");

                    b.ToTable("medication");
                });

            modelBuilder.Entity("JJPatients.Models.MedicationType", b =>
                {
                    b.Property<int>("MedicationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("medicationTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MedicationTypeId");

                    b.ToTable("medicationType");
                });

            modelBuilder.Entity("JJPatients.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientId")
                        .HasColumnType("int")
                        .HasComment("random patient number")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(50)")
                        .HasComment("street address")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(50)")
                        .HasComment("city")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("dateOfBirth")
                        .HasColumnType("datetime")
                        .HasComment("date of birth");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnName("dateOfDeath")
                        .HasColumnType("datetime")
                        .HasComment("date of death (null if alive)");

                    b.Property<bool>("Deceased")
                        .HasColumnName("deceased")
                        .HasColumnType("bit")
                        .HasComment("if yes, date of death required else, ignore date of death");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasColumnType("varchar(50)")
                        .HasComment("patient's first or given name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasComment("M or F")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("HomePhone")
                        .HasColumnName("homePhone")
                        .HasColumnType("varchar(50)")
                        .HasComment("10-digit home phone number")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasColumnType("varchar(50)")
                        .HasComment("patient's surname or family name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ohip")
                        .HasColumnName("OHIP")
                        .HasColumnType("varchar(50)")
                        .HasComment("12-character provincial medical")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postalCode")
                        .HasColumnType("varchar(10)")
                        .HasComment("postal code: A9A 9A9")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ProvinceCode")
                        .HasColumnName("provinceCode")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasComment("2-character province code")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("PatientId")
                        .HasName("aaaaapatient_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("HomePhone")
                        .HasName("homePhone");

                    b.HasIndex("PatientId")
                        .HasName("patientId");

                    b.HasIndex("PostalCode")
                        .HasName("postalCode");

                    b.HasIndex("ProvinceCode")
                        .HasName("provincepatient");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("JJPatients.Models.PatientDiagnosis", b =>
                {
                    b.Property<int>("PatientDiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientDiagnosisId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiagnosisId")
                        .HasColumnName("diagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnName("patientId")
                        .HasColumnType("int");

                    b.HasKey("PatientDiagnosisId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("PatientId");

                    b.ToTable("patientDiagnosis");
                });

            modelBuilder.Entity("JJPatients.Models.PatientMedication", b =>
                {
                    b.Property<int>("PatientMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientMedicationId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Din")
                        .IsRequired()
                        .HasColumnName("din")
                        .HasColumnType("varchar(8)")
                        .HasComment("link to medication by drug identification number")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<double?>("Dose")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dose")
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))")
                        .HasComment("number of dispensing units at a time");

                    b.Property<string>("ExactMinMax")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("exactMinMax")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("(N'exact')")
                        .HasComment("dosage frequency is exactly x periods, minimum of, or maximum of")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Frequency")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("frequency")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("number of doses per day/week/month; zero if as-required");

                    b.Property<string>("FrequencyPeriod")
                        .HasColumnName("frequencyPeriod")
                        .HasColumnType("varchar(50)")
                        .HasComment("period of frequency: per day, week, month or as-required")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PatientTreatmentId")
                        .HasColumnName("patientTreatmentId")
                        .HasColumnType("int")
                        .HasComment("link back to the procedure for this patient");

                    b.HasKey("PatientMedicationId")
                        .HasName("aaaaapatientMedication_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Din")
                        .HasName("medicationpatientMedication");

                    b.HasIndex("PatientTreatmentId")
                        .HasName("patientTreatmentpatientMedication");

                    b.ToTable("patientMedication");
                });

            modelBuilder.Entity("JJPatients.Models.PatientTreatment", b =>
                {
                    b.Property<int>("PatientTreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientTreatmentId")
                        .HasColumnType("int")
                        .HasComment("random key for treatment on this patient")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(max)")
                        .HasComment("general free-form comments about treatment")
                        .IsUnicode(false);

                    b.Property<DateTime>("DatePrescribed")
                        .HasColumnName("datePrescribed")
                        .HasColumnType("datetime")
                        .HasComment("date treatment prescribed to patient");

                    b.Property<int>("PatientDiagnosisId")
                        .HasColumnName("patientDiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentId")
                        .HasColumnName("treatmentId")
                        .HasColumnType("int")
                        .HasComment("link back to treatment");

                    b.HasKey("PatientTreatmentId")
                        .HasName("aaaaapatientTreatment_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PatientDiagnosisId");

                    b.HasIndex("PatientTreatmentId")
                        .HasName("patientProcedureId");

                    b.HasIndex("TreatmentId")
                        .HasName("procedurepatientProcedure");

                    b.ToTable("patientTreatment");
                });

            modelBuilder.Entity("JJPatients.Models.Province", b =>
                {
                    b.Property<string>("ProvinceCode")
                        .HasColumnName("provinceCode")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasComment("2-character province code ... ON, BC, etc")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnName("countryCode")
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("FirstPostalLetter")
                        .HasColumnName("firstPostalLetter")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("IncludesFederalTax")
                        .HasColumnName("includesFederalTax")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasComment("full province name ... Ontario, etc.")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("SalesTax")
                        .HasColumnName("salesTax")
                        .HasColumnType("float");

                    b.Property<string>("SalesTaxCode")
                        .IsRequired()
                        .HasColumnName("salesTaxCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ProvinceCode")
                        .HasName("aaaaaprovince_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CountryCode");

                    b.HasIndex("ProvinceCode")
                        .HasName("ProvinceCode");

                    b.ToTable("province");
                });

            modelBuilder.Entity("JJPatients.Models.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("treatmentId")
                        .HasColumnType("int")
                        .HasComment("random key")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(max)")
                        .HasComment("free-form decription of the procedure")
                        .IsUnicode(false);

                    b.Property<int>("DiagnosisId")
                        .HasColumnName("diagnosisId")
                        .HasColumnType("int")
                        .HasComment("link back to diagnosis");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasComment("formal name of the procedure")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TreatmentId")
                        .HasName("aaaaatreatment_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("DiagnosisId")
                        .HasName("diagnosisprocedure");

                    b.HasIndex("TreatmentId")
                        .HasName("procedureId");

                    b.ToTable("treatment");
                });

            modelBuilder.Entity("JJPatients.Models.TreatmentMedication", b =>
                {
                    b.Property<int>("TreatmentId")
                        .HasColumnName("treatmentId")
                        .HasColumnType("int")
                        .HasComment("link to treatment this record is for");

                    b.Property<string>("Din")
                        .HasColumnName("din")
                        .HasColumnType("varchar(8)")
                        .HasComment("link to medication for this treatment")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.HasKey("TreatmentId", "Din")
                        .HasName("aaaaatreatmentMedication_PK")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Din")
                        .HasName("medicationtreatmentMedication");

                    b.HasIndex("TreatmentId")
                        .HasName("treatmenttreatmentMedication");

                    b.ToTable("treatmentMedication");
                });

            modelBuilder.Entity("JJPatients.Models.Diagnosis", b =>
                {
                    b.HasOne("JJPatients.Models.DiagnosisCategory", "DiagnosisCategory")
                        .WithMany("Diagnosis")
                        .HasForeignKey("DiagnosisCategoryId")
                        .HasConstraintName("FK_diagnosis_diagnosisCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("JJPatients.Models.Medication", b =>
                {
                    b.HasOne("JJPatients.Models.ConcentrationUnit", "ConcentrationCodeNavigation")
                        .WithMany("Medication")
                        .HasForeignKey("ConcentrationCode")
                        .HasConstraintName("FK_medication_concentrationUnit")
                        .IsRequired();

                    b.HasOne("JJPatients.Models.DispensingUnit", "DispensingCodeNavigation")
                        .WithMany("Medication")
                        .HasForeignKey("DispensingCode")
                        .HasConstraintName("FK_medication_dispensingUnit")
                        .IsRequired();

                    b.HasOne("JJPatients.Models.MedicationType", "MedicationType")
                        .WithMany("Medication")
                        .HasForeignKey("MedicationTypeId")
                        .HasConstraintName("FK_medication_medicationType")
                        .IsRequired();
                });

            modelBuilder.Entity("JJPatients.Models.Patient", b =>
                {
                    b.HasOne("JJPatients.Models.Province", "ProvinceCodeNavigation")
                        .WithMany("Patient")
                        .HasForeignKey("ProvinceCode")
                        .HasConstraintName("FK_patient_province");
                });

            modelBuilder.Entity("JJPatients.Models.PatientDiagnosis", b =>
                {
                    b.HasOne("JJPatients.Models.Diagnosis", "Diagnosis")
                        .WithMany("PatientDiagnosis")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_patientDiagnosis_diagnosis")
                        .IsRequired();

                    b.HasOne("JJPatients.Models.Patient", "Patient")
                        .WithMany("PatientDiagnosis")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_patientDiagnosis_patient")
                        .IsRequired();
                });

            modelBuilder.Entity("JJPatients.Models.PatientMedication", b =>
                {
                    b.HasOne("JJPatients.Models.Medication", "DinNavigation")
                        .WithMany("PatientMedication")
                        .HasForeignKey("Din")
                        .HasConstraintName("FK_patientMedication_medication")
                        .IsRequired();

                    b.HasOne("JJPatients.Models.PatientTreatment", "PatientTreatment")
                        .WithMany("PatientMedication")
                        .HasForeignKey("PatientTreatmentId")
                        .HasConstraintName("FK_patientMedication_patientTreatment")
                        .IsRequired();
                });

            modelBuilder.Entity("JJPatients.Models.PatientTreatment", b =>
                {
                    b.HasOne("JJPatients.Models.PatientDiagnosis", "PatientDiagnosis")
                        .WithMany("PatientTreatment")
                        .HasForeignKey("PatientDiagnosisId")
                        .HasConstraintName("FK_patientTreatment_patientDiagnosis")
                        .IsRequired();

                    b.HasOne("JJPatients.Models.Treatment", "Treatment")
                        .WithMany("PatientTreatment")
                        .HasForeignKey("TreatmentId")
                        .HasConstraintName("patientTreatment_FK01")
                        .IsRequired();
                });

            modelBuilder.Entity("JJPatients.Models.Province", b =>
                {
                    b.HasOne("JJPatients.Models.Country", "CountryCodeNavigation")
                        .WithMany("Province")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("FK_province_country")
                        .IsRequired();
                });

            modelBuilder.Entity("JJPatients.Models.Treatment", b =>
                {
                    b.HasOne("JJPatients.Models.Diagnosis", "Diagnosis")
                        .WithMany("Treatment")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_treatment_diagnosis")
                        .IsRequired();
                });

            modelBuilder.Entity("JJPatients.Models.TreatmentMedication", b =>
                {
                    b.HasOne("JJPatients.Models.Medication", "DinNavigation")
                        .WithMany("TreatmentMedication")
                        .HasForeignKey("Din")
                        .HasConstraintName("FK_treatmentMedication_medication")
                        .IsRequired();

                    b.HasOne("JJPatients.Models.Treatment", "Treatment")
                        .WithMany("TreatmentMedication")
                        .HasForeignKey("TreatmentId")
                        .HasConstraintName("FK_treatmentMedication_treatment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
